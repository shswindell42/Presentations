{
	"name": "Loan Delta Lake Load",
	"properties": {
		"description": "Parses loan data from bronze layer, and merges into silver layer",
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sbisparkdemo",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2f7cc1a2-bed9-4996-b37f-e7e1126ee3a6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/07d94183-4c00-462f-adc3-8118aa879dbb/resourceGroups/data-lakehouse-demo/providers/Microsoft.Synapse/workspaces/sbi-synapse-demo/bigDataPools/sbisparkdemo",
				"name": "sbisparkdemo",
				"type": "Spark",
				"endpoint": "https://sbi-synapse-demo.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sbisparkdemo",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load('abfss://data@sbilakehousestorage.dfs.core.windows.net/bronze/freddiemac/loan/year=2021/historical_data_2021Q1.txt', format='text')\r\n",
					"display(df.limit(10))"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data = [\"202201,752\",\"202104,801\"]\r\n",
					"dateFormat = \"yyyyMM\"\r\n",
					"rdd = spark.sparkContext.parallelize(data)\r\n",
					"df = spark.read.csv(rdd, \"TestData Date, Score Integer\", dateFormat=dateFormat, header=False)\r\n",
					"df.show()"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# create the schema structure to read the data from\r\n",
					"from pyspark.sql.types import *\r\n",
					"\r\n",
					"schema = StructType([\r\n",
					"    StructField('Credit Score', IntegerType(), True)\r\n",
					"    ,StructField('First Payment Date', DateType(), True)\r\n",
					"    ,StructField('First Time Homebuyer Flag', StringType(), True)\r\n",
					"    ,StructField('Maturity Date', DateType(), True)\r\n",
					"    ,StructField('Metropolitan Statistical Area (MSA) Or Metropolitan Division', IntegerType(), True)\r\n",
					"    ,StructField('Mortgage Insurance Percentage (MI %)', DecimalType(), True)\r\n",
					"    ,StructField('Number of Units', IntegerType(), True)\r\n",
					"    ,StructField('Occupancy Status', StringType(), True)\r\n",
					"    ,StructField('Original Combined Loan-to-Value (CLTV)', IntegerType(), True)\r\n",
					"    ,StructField('Original Debt-to-Income (DTI) Ratio', IntegerType(), True)\r\n",
					"    ,StructField('Original UPB', StringType(), True)\r\n",
					"    ,StructField('Original Loan-to-Value (LTV)', StringType(), True)\r\n",
					"    ,StructField('Original Interest Rate', StringType(), True)\r\n",
					"    ,StructField('Channel', StringType(), True)\r\n",
					"    ,StructField('Prepayment Penalty Mortgage (PPM) Flag', StringType(), True)\r\n",
					"    ,StructField('Amortization Type (Formerly Product Type)', StringType(), True)\r\n",
					"    ,StructField('Property State', StringType(), True)\r\n",
					"    ,StructField('Property Type', StringType(), True)\r\n",
					"    ,StructField('Postal Code', StringType(), True)\r\n",
					"    ,StructField('Loan Sequence Number', StringType(), True)\r\n",
					"    ,StructField('Loan Purpose', StringType(), True)\r\n",
					"    ,StructField('Original Loan Term', StringType(), True)\r\n",
					"    ,StructField('Number of Borrowers', StringType(), True)\r\n",
					"    ,StructField('Seller Name', StringType(), True)\r\n",
					"    ,StructField('Servicer Name', StringType(), True)\r\n",
					"    ,StructField('Super Conforming Flag', StringType(), True)\r\n",
					"    ,StructField('Pre-HARP Loan Sequence Number', StringType(), True)\r\n",
					"    ,StructField('Program Indicator', StringType(), True)\r\n",
					"    ,StructField('HARP Indicator', StringType(), True)\r\n",
					"    ,StructField('Property Valuation Method', StringType(), True)\r\n",
					"    ,StructField('Interest Only (I/O) Indicator', StringType(), True)\r\n",
					"])\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}